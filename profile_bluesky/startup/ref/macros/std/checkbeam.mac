
########### SVN repository information ###################
# $Date: 2017-06-15 14:14:21 -0500 (Thu, 15 Jun 2017) $
# $Author: ilavsky $
# $Revision: 1412 $
# $HeadURL: https://subversion.xray.aps.anl.gov/spec/beamlines/USAXS/trunk/macros/std/checkbeam.mac $
# $Id: checkbeam.mac 1412 2017-06-15 19:14:21Z ilavsky $
########### SVN repository information ###################

#==============================================================================
# File: checkbeam.mac
# Macro Package: user defined chk_beam
# Version: 1.0
#
# Description: User defined chk_beam. If the monitor count  indicates the beam 
#              is down, monitor the APS storage ring current and the 
#              the station status, waiting until the beam is back up.
#              Then resume the scan.
#
# Written by: Xuesong Jiao 
# Date:       Feb 2006
# 
# User macros: chk_beam_setup
#              chk_beam_on
#              chk_beam_off
# Modification:
#  April, 17,2006-> X. Jiao
#          made chk_thresh normalized to count time.
#
#==============================================================================
#
#$Log: checkbeam.mac,v $
#Revision 1.4  2006/05/22 21:45:59  jiaox
#Removed S[MON] chk_thresh since some beamlines may not use monitor at all.
#
#Revision 1.3  2006/05/11 17:46:31  jiaox
#Added CVS Log entry.
#
#
###############################################################################

# modified 10/16/2009 by JIL to reflect the fact, that PV for shutter opened is set to 0 when opened...
# modified 10/10/2010 by JIL to change ref to def so the chk_beam_off/on can be used inside the macor
# modified 11/15/2010 by PAB to update 9idcLAX:USAXS:state to reflect missing beam
# modified 02/19/2013 by JIL to reopen the A shutter if it is closed manually, which is 15IDD bug. 
print "Please run chk_beam_setup first!"

#-------------------------------------------------------------------------------
#  Global Variables  for checkbeam.mac
#-------------------------------------------------------------------------------
global chk_thresh
global minimal_SRcurrent
global _station_chk_beam_PV
global beam_up_wait_time
minimal_SRcurrent=10
#chk_thresh = 1e6
beam_up_wait_time = 100


#-------------------------------------------------------------------------------
#  User macros
#-------------------------------------------------------------------------------
def chk_beam_setup '
    if( unset("_station_chk_beam_PV") ) {
    _station_chk_beam_PV= getval("PV for checking the beam in the station:","")
    } else {
    _station_chk_beam_PV= getval("PV for checking the beam in the  station:",_station_chk_beam_PV)
    }
    minimal_SRcurrent = getval("ring current threshold to determine the beam trip:", minimal_SRcurrent);
#    chk_thresh = getval("monitor counts/sec threshold to determine the beam trip:",chk_thresh);
    beam_up_wait_time = getval("wait time(seconds) after beam is back:",beam_up_wait_time)
'
def chk_beam_on  '
  def chk_beam \'chk_beam_aps\'
'
def chk_beam_off '
  def chk_beam \'break\'
'


#-------------------------------------------------------------------------------
#  Internal macros and functions
#-------------------------------------------------------------------------------

def chk_beam_aps '
    if(set_sim(-1) ||  isBeamOn()  ) {
       break;
    } else {
       local down_time back_time
       set_RunPreUSAXStuneNext 1       ## this sets the system to run preUSAXS tune after we get the beam back to aid recovery. 
       down_time = time();
       printf("%s : beam is down!\n",date()) 
       fprintf(DATAFILE,"#C %s : beam is down!\n",date());
       if(NOTIFY_ON_BEAM_LOSS) {sendNotifications("USAXS has lost beam!","The USAXS has detected that it has no beam in the station, and has stopped any running scans.")}
	while(!isBeamOn()) {
          printf("Been waiting %d seconds for beam ...\r",time()-down_time);
	    status_msg = "Beam down for "(time()-down_time)"s."
          epics_put("9idcLAX:USAXS:state",status_msg);
          openWhiteShutter  
          sleep(1);         
       }
       tty_cntl("ce");printf("\n");
       back_time = time();
       printf("%s : beam is back.\n",date());
       fprintf(DATAFILE,"#C %s : beam is back after %d seconds wait.\n",date(),back_time-down_time)
       if(beam_up_wait_time>0) {
            printf("wait %d seconds before resume.\n",beam_up_wait_time);
            status_msg = "Beam up, waiting "beam_up_wait_time"s to stabilize"
            epics_put("9idcLAX:USAXS:state",status_msg)
            do_sleep(beam_up_wait_time);
            fprintf(DATAFILE,"#C waited %d seconds to stabilize.\n",beam_up_wait_time)
       }
       fprintf(DATAFILE,"#C resume scan after beam is back.\n")          
       if(NOTIFY_ON_BEAM_LOSS) {sendNotifications("USAXS beam restored","The USAXS has detected that beam has returned, and has resumed any running scans.")}
	}
'

def isBeamOn() '{
    if( (epics_get("S:SRcurrentAI")>_minimal_SRcurrent) && (epics_get(_station_chk_beam_PV,"short"))) {
       return 1;
    } else {
       return 0;
    }
  
}'
