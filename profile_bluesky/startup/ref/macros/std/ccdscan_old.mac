#==============================================================================
#**************SPEC macros for the Advanced Photon Source**********************
#==============================================================================
# 
# Macro Package: CCD Image Server Controls
#
# Version: 1.0
#
# Description: This package contains macros that allows spec to trigger a CCD
#              detector and save the images during scans. The CCD must be controlled
#              by Brian Tieman's CCD Image Server Program, and spec talks to the
#              CCD through this Portable Channel Access Server. See Brian Tieman's
#              documentation for details on the Image Server Program.
#              
#              
#
# Written by: Xuesong Jiao 
# Date:       January 2006
# 
# Modified by: 
#
# User macros: ccdsetup
#              ccdinfo
#              setccdc
#              ccdset_saved_roi
#              ccd_addcolumn
#              ccd_rmcolumn
#              ccdscan_setup
#              ccdscan
#              ccdhelp
# 
#
# Modification history: 
#  January, 2006 X.Jiao
#  ->First Version. Based on M. Sutton's suggestion. Currently it uses the sequence 
#    number to check whether the acquisition is finised or not. Thus,it will save
#    the images to a junk file (so the sequence number is incremented) even it is 
#    told not to save images.
#  February,2006 X.Jiao
# ->Add Initialize to ccdset_time
#  March 07,2006 X.Jiao
# ->Remove Initialze (but leave sleep) to ccdset_time
# -> Made pseudo initialize for external trigger mode
#==============================================================================
#
#$Log: ccdscan_old.mac,v $
#Revision 1.11  2006/08/02 21:52:28  jiaox
#Made ccdscan can be nested inside a for loop. Now ccduse_on should be called at the begining, and uses the global variable CCD_FLAG  to turn on/off firing the ccd during scans.
#
#Revision 1.10  2006/07/28 17:17:36  jiaox
#corrected _ccdwait_fb_external to make sure no extral trigger to happen.
#
#Revision 1.9  2006/07/28 15:05:21  jiaox
#Make sure to ccd_showbeam is called even no dark is taken.
#
#Revision 1.8  2006/07/06 18:31:02  jiaox
#Corrected the _ccdwait_fb_external macro. The old one caused the shutter not open correctly when controlled by the delay generator.
#
#Revision 1.7  2006/05/11 17:46:31  jiaox
#Added CVS Log entry.
#
#
###############################################################################



##############################Global variables for ccd controls################
global CCDPV CCD_DATA_DIR CCD_FILE_EXT
global CCD_EXTERNAL_TRIGGER 
global CCD_EXPTIME_MODE
global pvDELAY_CTL pvDELAY_C pvDELAY_B
global SHUTTER_OPEN_TIME SHUTTER_CLOSE_TIME
global CCD_SAVED_ROI CCD_MONITOR_ROI USE_CCDDET_FLAG
global CCD_INITIALIZATION_TIME
CCD_INITIALIZATION_TIME = 1.5;
###############################################################################


#========================== dependency check; uspec_column.mac required========

if(!(whatis("u_column_add")&0x2)) {
  qdo uspec_column.mac
}

################Preliminary setup to know the hardware configuration###########


#------------------------------------------------------------------------------
#       extern trigger with delay generator to control shutter
#I know that 8idi is using such settings,so I put their PVs as default values.
#This part can be modified by users.
#------------------------------------------------------------------------------

if(unset("CCD_EXTERNAL_TRIGGER")) {
   print "\nThis BCDA package allows spec to control the CCD Image Server!"
   print "\nYou need to answer some questions first.\n"
   CCD_EXTERNAL_TRIGGER = yesno("Do you use the exteral trigger from a delay generator to control the CCD?","0")
   if (CCD_EXTERNAL_TRIGGER) {
      rdef ccdtrig '_ccd_delay_trig'
      rdef ccdarm '_ccdarm'
      rdef ccdinitialize '_ccdinitialize'
      rdef ccdset_shutter 'set_shutter_delay'
      rdef ccdwait '_ccdwait_seq_external'
      pvDELAY_CTL = getval("Input the PV for the external trigger control:","8idi:UnidigBo15.VAL")
      pvDELAY_C   = getval("Input the PV for the shutter open compensation:","8idi:DG1:cDelaySetA0")
      pvDELAY_B   = getval("Input the PV for the shutter close compensation:","8idi:DG1:bDealySetA0")
      SHUTTER_OPEN_TIME = getval("The shutter open time (Sec):",0)
      SHUTTER_CLOSE_TIME = getval("The shutter clsoe time (Sec):",0)
   } else {
      rdef ccdarm ''
      rdef ccdset_shutter ''
      rdef ccdtrig '_ccdtrig_internal'  
      rdef ccdwait '_ccdwait_'
      rdef ccdinitialize ''
  }
  
}

#------------------------------------------------------------------------------
# check if there is a pseudo counter "ccdc" configured in spec
#------------------------------------------------------------------------------
def chk_ccdc() '{
     local foo i
     foo = 0;
     for(i=0;i<COUNTERS;i++) {
        if(cnt_name(i) == "ccdc")  {
	   foo =1;
	   break;
	} 
     }
     return foo;
}'

if(unset("USE_CCDDET_FLAG")) {
  local i foo  foo2
  foo = yesno("\nSetup a pseudo counter(ccdc) to monitor some ROIS (its average value) from spec?","1")
  if( foo == 1) {
     foo2=chk_ccdc();
     if(foo2) {
         print "Found a counter named ccdc."
	 print "Seems that you have already configured a pseudo counter(None type)."
     } else {
         print "Please configure a pseudo counter "\ccdc\"(None type) with config."
     }
     USE_CCDDET_FLAG = 1
  } else {
     USE_CCDDET_FLAG = 0
  }
  CCD_MONITOR_ROI = "none"   
}

if(unset("CCDPV")) {
   CCDPV = "TST:CCD"
}

if(unset("CCD_DATA_DIR")) {
   CCD_DATA_DIR = "C:\\data\\"
}
if(unset("CCD_FILE_EXT")) {
   CCD_FILE_EXT = ""
}
printf("\nPlease use %c%sccdsetup%c%s to configure the image server settings.\n",27,"[31m",27,"[0m")
printf("You need define %c%sccd_blockbeam ccd_showbeam%c%s macro if you need to take dark images.",27,"[31m",27,"[0m");
printf("\nFor more help on this package, please use %c%sccdhelp%c%s.\n",27,"[31m",27,"[0m")

##################End  of preliminary setup ###################################


###############################################################################
#        User macros to configure spec with the Image Server program
###############################################################################

def ccdhelp '
    printf("\nUser macros for the BCDA ccd package\n")
    printf("\t%c%sccdsetup\n",27,"[1m")
    printf("\tccdinfo\n")
    printf("\tccdset_saved_roi\n")
    printf("\tsetccdc\n")
    printf("\tccd_addcolumn\n")
    printf("\tccd_rmcolumn\n")
    printf("\tccdscan_setup\n")
    printf("\tccdscan%c%s\n",27,"[0m")
    printf("See %c%s\"http://www.aps.anl.gov/aod/bcda/spec/APSMacros.php\"%c%s for more help\n",27,"[34m",27,"[0m")
'
#------------------------------------------------------------------------------
# ccdsetup has to be called before other macros is used.
# The user need to input the prefix of the Image Server PVs in order to
# build the connection.
#------------------------------------------------------------------------------

def ccdsetup ' 
   local type
   CCDPV=getval("The EPICS prefix of the CCD device:",CCDPV);
   CCD_DATA_DIR = getval("The windows directory where the Image Server saves the data:",CCD_DATA_DIR);
   if(substr(CCD_DATA_DIR,length(CCD_DATA_DIR)) != "\\" ) {
      CCD_DATA_DIR = CCD_DATA_DIR "\\"
   }     
   if( yesno("Use IMM file format",0)) 
      CCD_FILE_EXT = ".imm" ;
   else 
      CCD_FILE_EXT = "";
   CCD_SAVED_ROI = CCDPV "." getval("Saved ROI#(1-50) i.e. R01","R01")
   epics_put(sprintf("%s.Use",CCD_SAVED_ROI),1);
   epics_put(sprintf("%s.UseCalcs",CCD_SAVED_ROI),1);
   if(chk_ccdc() && USE_CCDDET_FLAG) {
      CCD_MONITOR_ROI = CCDPV "." getval("ROI# for the counter (\"none\" to not use)","R02")
      epics_put(sprintf("%s.Use",CCD_MONITOR_ROI),1);
      epics_put(sprintf("%s.UseCalcs",CCD_MONITOR_ROI),1);
   }
   
   printf("\n%s is configured\n",CCDPV)
   ccdinfo
   
'
#------------------------------------------------------------------------------
# show some general information of your CCD configuration
#------------------------------------------------------------------------------
def ccdinfo ' 
   p "================================================================"
   p "CCDManufacturer: " epics_get(sprintf("%s.CCDManufacturer",CCDPV))
   p "CCDModel: " epics_get(sprintf("%s.CCDModel",CCDPV))
   p "CCDChip Temperature: " epics_get(sprintf("%s.MeasuredTemp",CCDPV)) "C"
   p "ADCSpeed: " epics_get(sprintf("%s.ADC",CCDPV))
   p "BinX: " epics_get(sprintf("%s.BinX",CCDPV))
   p "BinY: " epics_get(sprintf("%s.BinY",CCDPV))
   p "CameraMode: " epics_get(sprintf("%s.CameraMode",CCDPV))
   p "Data home: "  CCD_DATA_DIR
   p "Saved ROI: " CCD_SAVED_ROI
   if (chk_ccdc()) {
      p "CCD pseudo counter: " CCD_MONITOR_ROI
   }
   p "================================================================"
'



#------------------------------------------------------------------------------
# ccdset_saved_roi selects which ROI will be saved 
# Currently only one ROI can be saved.
#------------------------------------------------------------------------------
def ccdset_saved_roi '
   if($# !=1) {
      p "Usage: ccdset_saved_roi R01"
      exit
   }
   CCD_SAVED_ROI = CCDPV "." "$1"  
   epics_put(sprintf("%s.Use",CCD_SAVED_ROI),1);
   epics_put(sprintf("%s.UseCalcs",CCD_SAVED_ROI),1);    
'

#------------------------------------------------------------------------------
# setccdc selects which ROI will be treated as the pseudo counter
#------------------------------------------------------------------------------
def setccdc '
   if($# !=1) {
      p "Usage: setccdc R02"
      exit
   }
   if(chk_ccdc()) {
      CCD_MONITOR_ROI = CCDPV "." "$1"      
      epics_put(sprintf("%s.Use",CCD_MONITOR_ROI),1);
      epics_put(sprintf("%s.UseCalcs",CCD_MONITOR_ROI),1);
   } else {
      CCD_MONITOR_ROI = "none"
      eprint " No pseudo counter ccd created. Use config to create is first."
   }   
'

#------------------------------------------------------------------------------
# ccd_addcolumn adds an ROI (its average) as a data column in the spec file.
# ccd_rmcolumn removes an ROI data column from the spec file
#------------------------------------------------------------------------------
def ccd_addcolumn '
    if($# !=1) {
       print "Usage: ccd_addcolum R01 "
       exit
    }
    local name cmd _pv
    name = "$1"
    epics_put(sprintf("%s.%s.Use",CCDPV,name),1);
    epics_put(sprintf("%s.%s.UseCalcs",CCDPV,name),1);
    _pv = sprintf("%s.%s.Average",CCDPV,name);
    cmd = sprintf("epics_get(\"%s\")",_pv);
    u_column_add(name,"%.8g",cmd,"ccdroi");
    printf("%s will be saved to the data file\n",name);
    u_column_show;
'

def ccd_rmcolumn '
    if($# !=1) {
       print "Usage: ccd_addcolum R01 "
       exit
    }
    local name cmd _pv
    name = "$1"
    if(name == "all") {
       u_column_clear("ccdroi")
       print "all ccd rois columns are not saved to the data file"
    } else {
       u_column_remove(name,"ccdroi");
       printf("%s is  not saved to the data file anymore\n",name);
    }   
'



###############################################################################
#              pieces to set each Image Server PV                             #
###############################################################################
global CCD_TARGET_N CCD_SCAN_SAVE CCD_REPEATS 
global CCD_DARK_NUM CCDDARK CCD_THROW
global MULTI_IMGS # useful 8-ID's imm fileformat; currently not used

#------------------------------------------------------------------------------
#  Two ways to set the exposure time: ccdset_time_hmsm which uses the separated
#  Hours,Miniutes,Seconds and Milliseconds fields; and ccdset_time_s which uses
#  ExposureTime PV. The default is using ccdset_time_hmsm; however for some cameras
#  that you can set exposuretime in microseconds resolution, you may use the 
#  ccdset_time_s by changing the ccdset_time definition.(see below)
#------------------------------------------------------------------------------
def ccdset_time '
   ccdset_time_hmsm $1
   CCD_EXPTIME_MODE = 0
   #ccdset_time_s $1
   #CCD_EXPTIME_MODE = 1
'
def ccdset_time_hmsm '
    if($# !=1 ) {
       eprint "Usage: ccdset_time seconds"
       exit
    }   
    if($1<0.001) {
       eprint "You are using Hours/Minutes/Seconds/Milliseconds PV, that can only accept time larger than 0.001 seconds."
       eprint "Please redefine your ccdset_time using ccdset_time_s"
       exit
    }   
    epics_put(sprintf("%s.Hours",CCDPV),int($1/3600));
    epics_put(sprintf("%s.Minutes",CCDPV),int(($1%3600)/60));
    epics_put(sprintf("%s.Seconds",CCDPV), int($1)%60);
    epics_put(sprintf("%s.Milliseconds",CCDPV),1000*($1-int($1)));
'    

def ccdset_time_s '
    if($# !=1 ) {
       eprint "Usage: ccdset_time seconds"
       exit
    }  
    if($1>2100) {
       eprint "You are using ExpousreTime PV, that can only accept time less than 2100 seconds."
       eprint "Please redefine your ccdset_time using ccdset_time_hmsm"
       exit
    }   
    epics_put(sprintf("%s.ExposureTime",CCDPV), $1);
'

#------------------------------------------------------------------------------
#  ccdset_repeats sets the number of expousures of the CCD
#------------------------------------------------------------------------------
def ccdset_repeats '
    if($# !=1) {
        eprint "Usage: ccdset_repeats numberOfExpoures"
	exit
    }
    if($1 < 1) {
        eprint "Number of Exposures can not be less than 1"
	exit
    }
    epics_put(sprintf("%s.NumExposures",CCDPV),$1);
    while(epics_get(sprintf("%s.NumExposures",CCDPV)) != $1) {
        sleep(0.2);
    }	
'    

#------------------------------------------------------------------------------
# ccdset_seqnum sets the sequence number. It waits until the PV is updated because
# ccdwait uses the updated sequence number to check if the acquistion is done.
#------------------------------------------------------------------------------
def ccdset_seqnum '
    if($# !=1 )  {
       eprint "Usage: ccdset_seqnum SequenceNumber"
       exit
    }
    epics_put(sprintf("%s.SeqNumber",CCDPV),$1);
     # to make sure that this PV is updated because it will be used in ccdwait
    while(epics_get(sprintf("%s.SeqNumber",CCDPV)) != $1) {
        sleep(0.2);
    }	
'    

#------------------------------------------------------------------------------
#  ccdset_filepath sets the direcory where image files will be saved
#  ccdset_filetempate sets the file template of the image files
#  ccdsave on/off enable/disable to save the images to hard disk
#------------------------------------------------------------------------------    
def ccdset_filepath(s) '{
    epics_put(sprintf("%s.FilePath",CCDPV),s);
    sleep(0.2);
}'    

def ccdset_filetemplate(s) ' {
    epics_put(sprintf("%s.FileTemplate",CCDPV),s);
}'

def ccdsave '
    if($# !=1 ) {
       eprint "Usage: ccdsave on/off"
       exit
    }
    if( "$1" == "on")  {
       epics_put(sprintf("%s.FocusMode",CCDPV),0);
       epics_put(sprintf("%s.Save",CCD_SAVED_ROI),1);
       
    }
    if( "$1" == "off") {
       epics_put(sprintf("%s.Save",CCD_SAVED_ROI),0);
    }
'

#------------------------------------------------------------------------------
# ccdset_roi: sets the dimension of a ROI. If called with one parameter(i.e. R01)
# the user can set the dimensions interactively; if called with 5 parameters,
# it sets the dimensions quietly.
#------------------------------------------------------------------------------
def ccdset_roi ' {
   local vstart,hstart,vlength,hlength,_pv
   if($#<1) {
      p "Usage:ccdsetroi R01 or set_roi R01 vstart vlength hstart hlength"
      exit
   }
   if($#==5) {
      vstart=$2
      vlength=$3
      hstart=$4
      hlength=$5
   }
   else {
      p "Set up dimensions for " "$1"
      vstart=getval(sprintf("%s.%s row_beg:",CCDPV,"$1"),epics_get(sprintf("%s.%s.VStart",CCDPV,"$1")))
      vlength=getval(sprintf("%s.%s number of rows:",CCDPV,"$1"),epics_get(sprintf("%s.%s.VLength",CCDPV,"$1")))
      hstart=getval(sprintf("%s.%s col_beg:",CCDPV,ROI),epics_get(sprintf("%s.%s.HStart",CCDPV,"$1")))
      hlength=getval(sprintf("%s.%s number of cols:",CCDPV,ROI),epics_get(sprintf("%s.%s.HLength",CCDPV,"$1")))
   }
   _pv = sprintf("%s.%s",CCDPV,"$1");
   
   epics_put(sprintf("%s.Use",_pv),1)
   epics_put(sprintf("%s.UseCalcs",_pv),1)
   epics_put(sprintf("%s.Save",_pv),0)
   epics_put(sprintf("%s.VStart",_pv),vstart)
   epics_put(sprintf("%s.HStart",_pv),hstart)
   epics_put(sprintf("%s.VLength",_pv),vlength)
   epics_put(sprintf("%s.HLength",_pv),hlength)
   sleep(0.5)
}'    

###############################################################################
#                          ccdscan macros                                     #
###############################################################################
CCDDARK = 0;
CCD_TARGET_N =1;
CCD_REPEATS =1;
CCD_DARK_NUM = 0;
CCD_THROW = 0;
CCD_SCAN_SAVE = 1

#-----------------------------------------------------------------------------
# ccdscan_setup sets the ccdscan features: 
# 1) save/not save images during scan
# 2) how many images to throw away at the begining(For some cameras, it ensures 
#    that the background is stable. )
# 3) how many darks to take and save.
# 4) how many images to take at each scan point.
#-----------------------------------------------------------------------------   
def ccdscan_setup'
    if($# != 0 && $# !=4) {
       p "Usage: ccdscan_setup or ccdscan_setup save_flag #throws #darks #repeats_per_point"
       exit
    }   
    if( $#  == 0) {   
       CCD_SCAN_SAVE =  yesno("Save images during scan?",1);
       CCD_THROW = getval("Number of images to throw at the beginning:",CCD_THROW);
       CCD_DARK_NUM = getval("Number of darks to take at the beginning:", CCD_DARK_NUM);
       CCD_REPEATS = getval("Number of imgages per scan point:", CCD_REPEATS);
    }
    if($# ==4 ) {
       CCD_SCAN_SAVE = $1
       CCD_THROW = $2
       CCD_DARK_NUM = $3
       CCD_REPEATS = $4
    }
'

#------------------------------------------------------------------------------
#  Example: ccdscan ascan th 1 2 10 1
#------------------------------------------------------------------------------
def ccdscan '{
    if($# ==0) {
        p "Usage: ccdscan any_spec_scan_macro"
	p "example: ccdscan ascan th  1 2 20 1"
	exit
    }	
    CCD_FLAG = 1;
    ond;offt;
    printf("\n#C %s ccdscan is turned on\n",date())
    ont;offd
	     
     #to let the the sequence number proceed in order to use _ccdwait_seq   
    ccdsave on
    cdef("cleanup_once","ccdscan_cleanup;","ccdscan","0x20")
    $*
    CCD_FLAG= 0;
    ond;offt;
    printf("\n#C %s ccdscan is turned off\n",date())
    ont;offd
	      
    offd;ont;
    ccdsave off
    CCDDARK = 0;
    CCD_TARGET_N =1;
    
}'

###############################################################################
#                Internal Macros/Functions                                    #
###############################################################################

#------------------------------------------------------------------------------
# cleaning stuff 
#------------------------------------------------------------------------------

def ccdscan_cleanup_scanabort 'ccdscan_cleanup;'

def ccdscan_cleanup  '
    epics_put(sprintf("%s.Abort",CCDPV),1);
    epics_put(sprintf("%s.NumExposures",CCDPV),1);
    ccdsave off
    CCD_TARGET_N = 1;
    CCDDARK = 0;
    ont;offd
    CCD_FLAG = 0;
    printf("\n%s. ccdscan aborted;cleaned ccdscan stuff.",date())
'    
    

#------------------------------------------------------------------------------
# turn on/off the user defined macros inside the stardard scan macros for ccdscan
#------------------------------------------------------------------------------
def ccduse_on '
    global CCD_FLAG
    cdef("measure0","\nif(CCD_FLAG) {_measure0_ccd}\n","ccd","0x10")
    cdef("measure2","\nif(CCD_FLAG) {_measure2_ccd}\n","ccd","0x10")
    cdef("user_prescan_head","\nif(CCD_FLAG){_user_prescan_head_ccd}\n","ccd","0x10")
'   
def ccduse_off '
    cdef("measure0","","ccd","delete")
    cdef("measure2","","ccd","delete")
    cdef("user_prescan_head","","ccd","delete")
'     


#------------------------------------------------------------------------------
# Some real internal macros that are embedded deeply inside the ccdscan
#------------------------------------------------------------------------------

def _user_prescan_head_ccd ' 
     ccdset_time _ctime
     ccdset_shutter
     ccdinitialize
     ccdscan_throw
     ccdscan_header
     ccdscan_dark
'   
def ccdscan_throw '
    if ( CCD_THROW > 0) {
       local foo;
       ccdset_repeats CCD_THROW
       foo=sprintf("%sjunk",CCD_DATA_DIR)
       ccdset_filepath(foo)
       foo = "tmp"
       ccdset_filetemplate(foo);
       CCD_TARGET_N = epics_get(sprintf("%s.SeqNumber",CCDPV))+CCD_THROW;
       ccd_blockbeam;
       printf("\nThe CCD is taking %i images and throw them away.\n",CCD_THROW);
       ccdarm
       ccdtrig;
       ccdwait;
    }
'

def ccdscan_header '
    local vstart vlength hstart vlength
    p "\nWriting CCD infomation to spec data file"
    ond;offt
    printf("\n#CCD ccdscan %i",SCAN_N+1);
    printf("\n#CCD save_flag %i",CCD_SCAN_SAVE);
    if(CCD_SCAN_SAVE) {
       printf("\n#CCD image_dir %s%s_%d",CCD_DATA_DIR,get_datafilename(),SCAN_N+1);
    } else {
       printf("\n#CCD image_dir N/A")
    }   
    printf("\n#CCD repeats_per_point %i",CCD_REPEATS);
    printf("\n#CCD dark %i",CCD_DARK_NUM);
    vstart = epics_get(sprintf("%s.VStart",CCD_SAVED_ROI));
    hstart = epics_get(sprintf("%s.HStart",CCD_SAVED_ROI));
    vlength = epics_get(sprintf("%s.VLength",CCD_SAVED_ROI));
    hlength = epics_get(sprintf("%s.HLength",CCD_SAVED_ROI));
    printf("\n#CCD saved_roi %s %i %i %i %i",CCD_SAVED_ROI,vstart,hstart,vlength,hlength);
    if(chk_ccdc() &&  (CCD_MONITOR_ROI != "none")) {
       vstart = epics_get(sprintf("%s.VStart",CCD_MONITOR_ROI));
       hstart = epics_get(sprintf("%s.HStart",CCD_MONITOR_ROI));
       vlength = epics_get(sprintf("%s.VLength",CCD_MONITOR_ROI));
       hlength = epics_get(sprintf("%s.HLength",CCD_MONITOR_ROI));
       printf("\n#CCD counter_roi %s %i %i %i %i",CCD_MONITOR_ROI,vstart,hstart,vlength,hlength);
    } else {
       printf("\n#CCD counter_roi %s %i %i %i %i", "N/A",0,0,0,0);
    }   
    ont;offd
'

def ccdscan_dark '
    local foo;
    if(CCD_SCAN_SAVE) {
	 foo = sprintf("%s%s_%d",CCD_DATA_DIR, get_datafilename(), SCAN_N+1);
         ccdset_filepath(foo);
	 foo = sprintf("%s_%d_dark\$\#%s",get_datafilename(),SCAN_N+1,CCD_FILE_EXT);
	 ccdset_filetemplate(foo);
    } else {
         foo=sprintf("%sjunk",CCD_DATA_DIR)
         ccdset_filepath(foo)
         foo = "tmp"
         ccdset_filetemplate(foo);
    }   
    
    if(CCD_DARK_NUM >0) {
      ccdset_repeats CCD_DARK_NUM;
      ccdset_seqnum 1;
      CCD_TARGET_N = epics_get(sprintf("%s.SeqNumber",CCDPV))+CCD_DARK_NUM;
      ccd_blockbeam;
      printf("\nTaking %i darks\n",CCD_DARK_NUM);
      ccdarm
      ccdtrig
      ccdwait
      if(CCD_MONITOR_ROI != "none") {
         CCDDARK = epics_get(sprintf("%s.Average",CCD_MONITOR_ROI));
      }	
     
    }
    ccd_showbeam;
'

def _measure0_ccd '
      ccdset_repeats CCD_REPEATS
      
      if(CCD_SCAN_SAVE) {
         local foo2;
	 foo2 = sprintf("%s_%d_%04d_\$\#%s",get_datafilename(),SCAN_N,NPTS,CCD_FILE_EXT)
         ccdset_filetemplate(foo2);
      }
      ccdset_seqnum 1
      CCD_TARGET_N = epics_get(sprintf("%s.SeqNumber",CCDPV))+CCD_REPEATS
      ccdarm
      ccdtrig;
      
'
def _measure2_ccd '
      ccdwait
      if(CCD_MONITOR_ROI != "none") {
         ccd_getcounts
      }	 
'                 
def ccd_getcounts '
    if( chk_ccdc()) {
       S[ccdc] = epics_get(sprintf("%s.Average",CCD_MONITOR_ROI))-CCDDARK;
    }   
'

def _ccdinitialize ' {
    epics_put(sprintf("%s.Initialize",CCDPV),1);
    sleep(CCD_INITIALIZATION_TIME);
}'

def _ccdwait_ '
   while( (epics_get(sprintf("%s.AcquirePOLL",CCDPV),"short")) != 0) {
          sleep(0.1);
   }
	      
'
def _ccdwait_seq '
    while( (epics_get(sprintf("%s.SeqNumber",CCDPV))) != CCD_TARGET_N) {
       sleep(0.1);
    }
'
def _ccdwait_seq_external'
     while( (epics_get(sprintf("%s.SeqNumber",CCDPV))) != CCD_TARGET_N) {
        while( epics_get(sprintf("%s.SeqNumber",CCDPV)) == CCD_N) 
	     sleep(0.1);
	if(epics_get(sprintf("%s.SeqNumber",CCDPV)) < CCD_TARGET_N)	      
	     _ccd_delay_trig;    
    }
'


def _ccdtrig_internal'
    epics_put(sprintf("%s.AcquirePOLL",CCDPV),1);  
'     

def _ccd_delay_trig '
    # trigger the camera with delay generator as the setup in 8ID
    global CCD_N;
    CCD_N = epics_get(sprintf("%s.SeqNumber",CCDPV))
    epics_put(pvDELAY_CTL,1);
    sleep(0.01);
    epics_put(pvDELAY_CTL,0);
'

def set_shutter_delay '
        local shuttertime
        sleep(1.0);
	if (!CCD_EXPTIME_MODE) {
           shuttertime = epics_get(sprintf("%s.Hours",CCDPV))*3600;
   	   shuttertime += epics_get(sprintf("%s.Minutes",CCDPV))*60;
	   shuttertime += epics_get(sprintf("%s.Seconds",CCDPV));
	   shuttertime += epics_get(sprintf("%s.Milliseconds",CCDPV))/1000.;
	} else {
	   shuttertime = epics_get(sprintf("%s.ExposureTime",CCDPV));
	}
	if (epics_get(sprintf("%s.CameraMode",CCDPV),"short") == 3)  { # for Camera using Kinetics Mode
	   nrows = epics_get(sprintf("%s.VLength",SAVED_ROI));
	   shuttertime = int(nrows*shuttertime/epics_get(sprintf("%s.KinStripSize",CCDPV)));
	}   
	epics_put(pvDELAY_C,SHUTTER_OPEN_TIME);
	epics_put(pvDELAY_B,(SHUTTER_OPEN_TIME-SHUTTER_CLOSE_TIME+shuttertime));
	sleep(0.01);

'	
def _ccdarm '
    epics_put(sprintf("%s.AcquirePOLL",CCDPV),1)
    while(epics_get(sprintf("%s.AcquirePOLL",CCDPV),"short") ==0)
      sleep(0.001);
'

def get_datafilename() ' {
    local  foo1 [];
    local foo2;
    foo2 = split(DATAFILE,foo1,"/")-1
    return foo1[foo2];
}'

###############################################################################
#                        Macros that should be implemented by users           #
###############################################################################
ccduse_on

def ccd_blockbeam '
    p "\nNow the beam is blocked or attenuated, so no x-ray hits the camera during acquisition"
    p "You need to implement this for your specific setup"
'

def ccd_showbeam '
    p "\nNow the beam is allowed to hit the camera during acquisition"
    p "You need to implement this for your specific setup"
'
