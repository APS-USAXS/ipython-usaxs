#
# ccd-control.mac
#   Pete Jemian
#   2004-Jun-08
#
# control Brian Tieman's CCD EPICS-based server
#
# Since the EPICS server is not a VxWorks IOC, must use
# full PV names, including fields.  Case is important.

# consult CCD_Image_Server_Documentation.htm for more information

#   qdo /epics/clients/spec/macros/ccd-control.mac

# LIST OF FUNCTIONS
#  ccd_sel ccd_prefix
#  ccd_put(ccd_field, ccd_value)
#  ccd_get(ccd_field)
#  ccdwait
#  ccdSaveModeOn
#  ccdacquire
#  ccdSaveModeOff
#  ccdSetExpTime(ccd_exp_time_secs)
#  ccdFileTemplate(ccd_template)
#  ccdSeqNumber(ccd_seqnumber)
#  ccdPrintStatus
#  ccdMaxMinTest
#  ccdpicture exposure_time_s
#  ccd_use shortName seqNumber exposure_time_s
#  ccd_do_not_use

global CCD_PREFIX                   # EPICS PV for CCD server
global CCD_OVERHEAD_SECS            # readout time
global CCD_OVERHEAD_SECS_MEASURED   # measured readout time

if (unset("CCD_PREFIX")) {CCD_PREFIX = ""}
if (unset("CCD_OVERHEAD_SECS")) {CCD_OVERHEAD_SECS = 4.0}

#----------------------------------------------------------

def ccd_sel '{
  global CCD_PREFIX
  if( $# != 1) {
    printf ("usage: ccd_sel ccd_prefix\n")
    exit;
  }
  ccd_prefix = \'$1\'
  CCD_PREFIX = ccd_prefix
}'

def ccd_put(ccd_field, ccd_value) '{
  local pv
  global CCD_PREFIX
  if (CCD_PREFIX == "") {
    eprint "CCD_PREFIX variable is not set (e.g. ccd_sel bwi:ccd )."
    exit
  }
  pv = sprintf("%s.%s", CCD_PREFIX, ccd_field)
  epics_put(pv, ccd_value)
}'

def ccd_get(ccd_field) '{
  local pv
  global CCD_PREFIX
  if (CCD_PREFIX == "") {
    eprint "CCD_PREFIX variable is not set (e.g. ccd_sel bwi:ccd )."
    exit
  }
  pv = sprintf("%s.%s", CCD_PREFIX, ccd_field)
  return (epics_get(pv))
}'

def ccdwait '{
  local _ccd_poll _tStart
  global CCD_PREFIX                   # EPICS PV for CCD server
  global CCD_OVERHEAD_SECS            # readout time
  global CCD_OVERHEAD_SECS_MEASURED   # measured readout time
  # wait for the exposure to finish
  # overhead time for Apogee CCD is between 3.0 and 4.0 seconds
  # IF you try to get "AcquirePOLL" while some cameras are processing,
  # you will get this nice EPICS error that distracts people needlessly:
  #  Error on epics_get("PV.AcquirePOLL"):  
  #       User specified timeout on IO operation expired (0.5s).
  #
  _tStart = time()
  sleep(CCD_OVERHEAD_SECS)
  _ccd_poll = ccd_get("AcquirePOLL")
  while (_ccd_poll) {
    sleep(0.1)
    _ccd_poll = ccd_get("AcquirePOLL")
    #print " ... waiting for CCD exposure to complete: " _ccd_poll
  }
  CCD_OVERHEAD_SECS_MEASURED = time() - _tStart
}'

def ccdSetExpTime(ccd_exp_time_secs) '{
  local _exp_h   _exp_m   _exp_s   _exp_ms
  #
  # set the exposure time in the EPICS server
  #
  _exp_h  = int(ccd_exp_time_secs / 3600)
  _exp_m  = int((ccd_exp_time_secs % 3600) / 60)
  _exp_s  = int(ccd_exp_time_secs) % 60
  _exp_ms = 1000*(ccd_exp_time_secs - int(ccd_exp_time_secs))
  ccd_put("Hours",         sprintf("%d",_exp_h))
  ccd_put("Minutes",       sprintf("%d",_exp_m))
  ccd_put("Seconds",       sprintf("%d",_exp_s))
  ccd_put("Milliseconds",  sprintf("%d",_exp_ms))
}'

def ccdFileTemplate(ccd_template) '{
  ccd_put("FileTemplate", ccd_template)
}'

def ccdSeqNumber(ccd_seqnumber) '{
  ccd_put("SeqNumber", ccd_seqnumber)
  sleep(1)
}'

def ccdSaveModeOn '{
  ccd_put("R01.Save",      1)
  ccd_put("R01.Use",       1)
  ccd_put("R01.UseCalcs",  1)
}'

def ccdacquire '{
  ccd_put("AcquirePOLL",  1)
}'

def ccdSaveModeOff '{
  ccd_put("R01.Save",     0)
}'

def ccdPrintStatus '{
  local _h _m _s _ms
  _h  = ccd_get("Hours")
  _m  = ccd_get("Minutes")
  _s  = ccd_get("Seconds")
  _ms = ccd_get("Milliseconds")
  printf("CCD exposure time: %d:%02d:%02d.%03d\n", _h, _m, _s, _ms)
  print "CCD number of exposures: "  ccd_get("NumExposures")
  print "CCD binning: "  ccd_get("BinX")  ":x by "  ccd_get("BinY")  ":y"
  print "CCD file template: "  ccd_get("FileTemplate")
  print "CCD sequence number: "  ccd_get("SeqNumber")
}'

def ccdMaxMinTest '{
  local _max_counts _min_counts
  _max_counts = ccd_get("R01.Max")
  _min_counts = ccd_get("R01.Min")
  if (_max_counts == pow(2,14)-1) {
    print "NOTE: CCD dynamic range exceeded"
  } else {
    #print "CCD image acquired:  min=" _min_counts "  max=" _max_counts
  }
}'

#-----------------------------------------------------------------------

def ccdpicture '
  local _exp_time
  global CCD_PREFIX CCD_OVERHEAD_SECS
  #
  # this function will tell the CCD to take one picture and store it
  # configuration of the CCD controls is maintained elsewhere.
  # This routine will set the exposure time.
  #
  if( $# != 1) {
    printf ("usage: ccdpicture exposure_time_s\n")
    exit;
  }
  _exp_time = $1
  #
  # set the exposure time in the EPICS server
  #
  ccdSetExpTime(_exp_time)
  #
  ccdSaveModeOn
  #ccdPrintStatus
  #
  # start the exposure
  #
  ccdacquire
  sleep(_exp_time)
  #
  # wait for the exposure to finish
  #
  ccdwait
  #
  ccdSaveModeOff
  ccdMaxMinTest
'

####################################################################################
### these ideas have not been tested yet
####################################################################################
def ccd_use '{
  local str shortName seqNumber _exp_time
  global CCD_PREFIX
  if( $# != 3) {
    printf ("usage: ccd_use shortName seqNumber exposure_time_s\n")
    exit;
  }
  shortName = \'$1\'
  seqNumber = $2
  _exp_time = $3
  str = sprintf("%s_s%03d_p\$#", shortName, SCAN_N+1)
  #---------------------------------------------------
  # EXAMPLE:
  #   SCAN_N=4 (this SPEC scan is number 5)
  #   CCD server is on sequence number 7 (next image is 7), set to TIFF
  #   shortName = example
  # str = example_s005_$#
  # image file on CCD server is: example_s5_p00007.tif
  #---------------------------------------------------
  ccdFileTemplate(str)
  ccdSeqNumber(seqNumber)
  ccdSetExpTime(_exp_time)
  ccdSaveModeOn
  sleep(0.5)  # must wait a bit for the PV server to react
  ccdPrintStatus
  rdef user_precount \'ccdacquire\'
  rdef user_postcount \'ccdwait\'
}'
def ccd_do_not_use '
  ccdSaveModeOff
  def user_precount \'\'
  def user_postcount \'\'
'
####################################################################################

####################################################################################
### This example was contrived for Gabrielle Long in June 2003
### to fire a CCD and then take some scans.
####################################################################################
#     def ccdscan '
#       local _ggl_mot _ggl_sta _ggl_fin _ggl_int _ggl_tim _ggl_cmd
#       local _ggl_template _ggl_seqNumber
#       if( $# != 5) {
#         printf ("Usage:  ccdscan  motor start finish  intervals time\n")
#         exit;
#       }
#       _ggl_mot = $1
#       _ggl_sta = $2
#       _ggl_fin = $3
#       _ggl_int = $4
#       _ggl_tim = $5
#       if (_ggl_tim <= 0) {
#         printf ("Usage:  cannot count against monitor, time(s) must be greater than zero\n")
#         exit;
#       }
#       _ggl_template  = ccd_get("FileTemplate")
#       _ggl_seqNumber = ccd_get("SeqNumber")
#       comment "CCD file template: %s"      _ggl_template
#       comment "next CCD image number: %d"  _ggl_seqNumber
#         #
#         # fire the CCD during    user_precount
#       rdef user_precount \'printf(" ccdpicture  %g\n", _ggl_tim); ccdpicture _ggl_tim\'
#         # Do the scan.  Ignore the counting data.
#       ascan $*
#         # schedule a cleanup
#       reset_ccdscan
#     '
#
#     def reset_ccdscan '
#       def user_precount \'\'
#     '
####################################################################################

####################################################################################
### This example was contrived for Girsh Blumberg in November 2003
### to fire a CCD during a mesh scan.
####################################################################################
#  
#  comment "a new sample will be run with CCD images"
#  
#  DDX=.22
#  DDY=0.925
#  DELAY_SECS=3
#  MY_COUNT_TIME=5
#  MESH_SIZE=0.06
#  MESH_INTERVALS=3
#  
#  str = sprintf("%s_s%02d_p$#", "test", SCAN_N+1)
#  epics_put("tus:ccd.FileTemplate", str)
#  epics_put("tus:ccd.SeqNumber", 0)
#  epics_put("tus:ccd.Seconds", MY_COUNT_TIME)
#  
#  def user_postmove '{
#    epics_put("tus:ccd.AcquireCLBK", 1)
#  }'
#  
#  mesh  dx DDX-MESH_SIZE DDX+MESH_SIZE MESH_INTERVALS  dy DDY-MESH_SIZE DDY+MESH_SIZE MESH_INTERVALS  DELAY_SECS+MY_COUNT_TIME
#  comment "small sample - 6 K - 40x40 um slits"
#  
#  def user_postmove ''
####################################################################################
