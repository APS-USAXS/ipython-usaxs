
# $Id: usaxs_waxs.mac 1472 2018-02-12 20:17:10Z ilavsky $

########### SVN repository information ###################
# $Date: 2018-02-12 14:17:10 -0600 (Mon, 12 Feb 2018) $
# $Author: ilavsky $
# $Revision: 1472 $
# $HeadURL: https://subversion.xray.aps.anl.gov/spec/beamlines/USAXS/trunk/macros/local/usaxs_waxs.mac $
# $Id: usaxs_waxs.mac 1472 2018-02-12 20:17:10Z ilavsky $
########### SVN repository information ###################

# this is support for pinhole WAXS in USAXS instrument
# version 1, JIL December 7, 2012
# version 1.1, JIL February 6, 2013, support for new PVs
# 2013-02-19 modified to accept string variable or string as sample name
# 2013-03-05 JIL, modified to clean up user title of not acceptable characters
# 2013-06-17 JIL, added more comments to web page for information on what is happening
# 2014-04-25 JIL, minor improvements
# 2015-03-16, JIL added epics PVs handling for preUSAXStune
# 2015-03-26, JIL,fixed __get_clean_user_string being called twice. 
# 2017-11-21, JIL, modified to generate path for waxs pilatus200kw data automatically. 

#-------------------------------------------------------------------------------
#############################################################################

def waxsExp '{
  if( $# != 4) {
    printf ("usage: waxsExp sx sy thickness \"Sample name\"\n")
    exit;
  }
  local pos_X pos_Y thickness scan_title old_ScalerDelay LocalFldrName  
  
  pos_X = $1
  pos_Y = $2
  thickness = $3
  scan_title = __returnSampleName("$4")

  global WAXSPVprefix 
  #global WAXSPathPrefix
  local  __tmpMsgString, __tmpStrMsg2
  
   ##################################################### 
   IfRequestedStopBeforeNextScan
   #####################################################
   # check if we are ready to run preUSAXStune and run if requested. 
   run_preUSAXStuneIfNeeded  1 
   # done tuning, if requested by user or by number of scans recently done...     
   #####################################################  
   useModeWAXS                                          # setup for WAXS mode
   ### tell users we are collecting WAXS data
   epics_put ("9idcLAX:collectingWAXS", 1)
   epics_put ("9idcLAX:collectingSAXS", 0)
   ##################################################### 
   # remove bad characters for user, if he/she screws up. Append any user info if needed
   scan_title  = __get_clean_user_string(scan_title)
   ##################################################### 
   epics_put ("9idcLAX:USAXS:state",      "Preparing for waxs" )
   epics_put ("9idcLAX:USAXS:timeStamp",   date())
   epics_put ("9idcLAX:USAXS:macroFileTime",      date())
   epics_put("9idcLAX:USAXS:sampleTitle",scan_title)   # store original user name, before cleaning up as sample name. 
   epics_put ("9idcLAX:SpecMacroFileName",DATAFILE )     # put Data file name for Nexus file
   SPEC_STD_TITLE = TITLE		# what is TITLE here???
   epics_put ("9idcLAX:USAXS:userName",    USER)
   epics_put ("9idcLAX:USAXS:userDir",     CWD)
   #epics_put ("9idcLAX:USAXS:specFile",    DATAFILE)
   #epics_put ("9idcLAX:USAXS:specScan",    SCAN_N+1)
   #epics_put ("9idcLAX:USAXS:SampleThickness",    USAXS_SAMPLE_THICKNESS)
   epics_put ("9idcLAX:USAXS:scanMacro",   "WAXS")
   #####################################################
   # move the sample in place...
      A[sx] = pos_X
      A[sy] = pos_Y
      move_em; waitmove                #sample is either in position or we have broken out of this macro
   # done moving sample in place. This also adds time so writing the hdf file is done. 
  LocalFldrName  = USAXS_CleanupFileName (DATAFILE , "waxs") 
                                                       # set folder name where to write to data....
                                      #directory = WAXSPathPrefix LocalFldrName "/" 
                                     #@TODO check EXPERIMENT and PIN_Image_BaseDir for illegal filesystem characters
  directory = "/mnt" CWD "/" LocalFldrName "/" 
  directory = sub("share1","usaxscontrol",directory)   # Pilatus 200kw needs to use usaxscontrol instead of share1 in the path... 

  set_WAXS_IMAGE_BASEDIR directory 
  start_file_num = epics_get(sprintf("%s:cam1:FileNumber",WAXSPVprefix))
  # set Nexus file number the same in case they are out of sync
  epics_put(sprintf("%s:Nexus1:FileNumber",WAXSPVprefix),start_file_num) 
  epics_put(sprintf("%s:HDF1:FileNumber",WAXSPVprefix),start_file_num) 

  epics_put(sprintf("%s:cam1:FilePath",WAXSPVprefix),"/tmp/")
  ###epics_put(sprintf("%s:cam1:FilePath",WAXSPVprefix),directory)
  epics_put(sprintf("%s:Nexus1:FilePath",WAXSPVprefix),directory)
  epics_put(sprintf("%s:HDF1:FilePath",WAXSPVprefix),directory)
  epics_put(sprintf("%s:cam1:FileName",WAXSPVprefix),scan_title)
  epics_put(sprintf("%s:Nexus1:FileName",WAXSPVprefix),scan_title) 
  epics_put(sprintf("%s:HDF1:FileName",WAXSPVprefix),scan_title) 
  epics_put(sprintf("%s:Nexus1:BlockingCallbacks",WAXSPVprefix),1)         #this forces Nexus writer to finish first before "Done" is allowed. 
  epics_put(sprintf("%s:HDF1:BlockingCallbacks",WAXSPVprefix),1)         #this forces Nexus writer to finish first before "Done" is allowed. 
  epics_put("9idcLAX:USAXS_WAXS:sampleTitle",scan_title)
  epics_put("9idcLAX:sampleThickness",thickness )      # put sample thickness for Nexus file
  __tmpStrMsg2 = "./" LocalFldrName "/"
  __tmpMsgString=sprintf("%s%s_%04d.hdf",__tmpStrMsg2, scan_title, start_file_num)
   #####################################################
   # create spec scan record...
   # set heading for scans to show if we are running USAXS or SBUSAXS
        epics_put ("9idcLAX:USAXS:specFile",    DATAFILE)
        epics_put ("9idcLAX:USAXS:specScan",    SCAN_N+1)
        epics_put ("9idcLAX:USAXS:SampleThickness",    USAXS_SAMPLE_THICKNESS)
	HEADING = "WAXS "
	HEADING=sprintf("%s%s",HEADING,sprintf(" %s     %g    %g    %g    %g     %g ",\
		__tmpMsgString, pos_X, pos_Y , thickness , WAXS_AcquireTime, WAXS_NumImages))
	FPRNT=PPRNT=VPRNT=""
	#FPRNT=sprintf("%s%s  ",FPRNT,motor_name(ar))
	#PPRNT=sprintf("%s%8.8s ",PPRNT,motor_name(ar))
	#VPRNT=sprintf("%s%9.9s ",VPRNT,motor_name(ar))
	scan_head
	PFMT=sprintf("%%s%%8.%df ",UP)
	VFMT=sprintf("%%s%%9.%df ",UP)
	# UP is user precision, defined in standard.mac as 4
        # it can be redefined to show more decimal places if needed
  # done with spec scan record...
  mv_Al_filter WEXP_AL_FILTER
  mv_Ti_filter WEXP_TI_FILTER
  get_angles
  #set the I0 gain right
  openTiFilterShutter
  autorange_I0I00amps
  closeTiFilterShutter
  # set Num images and acquire time to what user wants
  epics_put(sprintf("%s:cam1:NumImages",WAXSPVprefix),PIN_NumImages)
  epics_put(sprintf("%s:cam1:AcquireTime",WAXSPVprefix), (WAXS_AcquireTime)) 
                                       # for multiple images, this is minimum readout time needed
  epics_put(sprintf("%s:cam1:AcquirePeriod",WAXSPVprefix), WAXS_AcquireTime + 0.004)         
                                       #this is how log total exposure should be, at least 0.004 s longer
                                       # JIL: NOTE ... Acquire period = Acquire time + 0.004 for multiple images
  epics_put("9idcLAX:vsc:c1.TP", WAXS_AcquireTime+1)                  # set scalars to long enough time...
  epics_put("9idcLAX:vsc:c0.TP", WAXS_AcquireTime+1) 
  epics_put("9idcLAX:vsc:c0.CONT",0)                                      # set scalar to manual counting only
  epics_put("9idcLAX:vsc:c1.CONT",0)
  epics_put("9idcLAX:vsc:c1.RATE",60)                   ##this is needed to make sure we get as up to date I0 number as possible for AD software. 
  epics_put("9idcLAX:vsc:c0.RATE",60)                   ##this is needed to make sure we get as up to date I0 number as possible for AD software. 
  old_ScalerDelay = epics_get("9idcLAX:vsc:c0.DLY")
  epics_put("9idcLAX:vsc:c0.DLY",0)
  epics_put("9idcLAX:vsc:c1.DLY",0)
  epics_put("9idcLAX:USAXS_WAXS:StartExposureTime",date())                #Save start time for exposure
  epics_put ("9idcLAX:USAXS:state",       sprintf("%s for %g sec", "WAXS exposure", WAXS_AcquireTime ))
  epics_put ("9idcLAX:USAXS:sampleTitle", sprintf("%s_waxs", scan_title))
  epics_put ("9idcLAX:USAXS:timeStamp",   date())
  epics_put ("9idcLAX:USAXS:macroFileTime",      date())
  epics_put("9idcLAX:vsc:c1.CNT",1)
  epics_put("9idcLAX:vsc:c0.CNT",1)  

  areaDetectorAcquire(sprintf("%s:cam1:Acquire",WAXSPVprefix), WAXS_AcquireTime)	           # fire detector and wait for it to be done
   
  epics_put("9idcLAX:vsc:c0.RATE",5)                   
  epics_put("9idcLAX:vsc:c1.CNT",0)
  epics_put("9idcLAX:vsc:c0.CNT",0)  
  set_PIN_I0(epics_get("9idcLAX:vsc:c1.S2"))			               #set the I0 value for Nexus file writer using gated scaler. Piltus 300kW is gating.
  epics_put("9idcLAX:USAXS_WAXS:EndExposureTime",date())               #Save end time for exposure

  # and fix the order number on case users wanted more than one image...
  if(PIN_NumImages>1){epics_put(sprintf("%s:cam1:FileNumber",WAXSPVprefix),start_file_num+PIN_NumImages)}
  comment "I0 value: %5.0f" PIN_I0
  epics_put("9idcLAX:vsc:c0.DLY",old_ScalerDelay)
  sleep(0.05) 
  epics_put ("9idcLAX:USAXS:state",       "Done WAXS")
  epics_put ("9idcLAX:USAXS:timeStamp",   date())
  epics_put ("9idcLAX:USAXS:macroFileTime",      date())
  ### tell users we are NOT collecting WAXS data
  epics_put ("9idcLAX:collectingWAXS", 0)
}'

#-------------------------------------------------------------------------------
#############################################################################
