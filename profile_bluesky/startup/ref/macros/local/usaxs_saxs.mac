
# $Id: usaxs_saxs.mac 1472 2018-02-12 20:17:10Z ilavsky $

########### SVN repository information ###################
# $Date: 2018-02-12 14:17:10 -0600 (Mon, 12 Feb 2018) $
# $Author: ilavsky $
# $Revision: 1472 $
# $HeadURL: https://subversion.xray.aps.anl.gov/spec/beamlines/USAXS/trunk/macros/local/usaxs_saxs.mac $
# $Id: usaxs_saxs.mac 1472 2018-02-12 20:17:10Z ilavsky $
########### SVN repository information ###################

# this is support for pinhole SAXS in USAXS instrument
# Geometry parameters we need to define, for now these will be spec global variables
# new PD for transmission defining variables
#     SAXS_PD_Xoffset          # how much to move in pinX from beam position to get to SAXS PD
#     SAXS_PD_Yoffset          # how much to move in pinY from beam position to get to SAXS PD
#     2015-03-16, JIL:    added epics PVs handling for preUSAXStune
#     2016-01-18, JIL:    modified for TR_diode amplifier
    
#-------------------------------------------------------------------------------
#############################################################################
  
def saxsExp '{

   local pos_X pos_Y thickness scan_title old_ScalerDelay LocalFldrName 
   local __tmpMsgString, __tmpStrMsg2
   global temp
   if( $# != 4) {
     printf ("usage: saxsExp sx sy thickness \"Sample name\"\n")
     exit;
   }
   pos_X = $1
   pos_Y = $2
   thickness = $3
   scan_title = __returnSampleName("$4")
   ##################################################### 
   IfRequestedStopBeforeNextScan  
   #####################################################
   # check if we are ready to run preUSAXStune and run if requested. 
   #####################################################
   # check if we are ready to run preUSAXStune and run if requested. 
   run_preUSAXStuneIfNeeded 1
   # done tuning, if requested by user or by number of scans recently done...     
   #####################################################  
   useModeSAXS
   ### tell users we are collecting SAXS data
   epics_put ("9idcLAX:collectingSAXS", 1)
   epics_put ("9idcLAX:collectingWAXS", 0)
   ##################################################### 
   # remove bad characters for user, if he/she screws up. Also append any user info if neede
   scan_title  = __get_clean_user_string(scan_title)
   epics_put("9idcLAX:USAXS:sampleTitle",scan_title)   # store original user name, before cleaning up as sample name. 
   ##################################################### 
   epics_put ("9idcLAX:USAXS:state",      "Preparing SAXS")
   epics_put ("9idcLAX:USAXS:macroFileTime",      date())
   epics_put ("9idcLAX:SpecMacroFileName",DATAFILE )     # put Data file name for Nexus file
   SPEC_STD_TITLE = TITLE		# what is TITLE here???
   TITLE      = scan_title
   epics_put ("9idcLAX:USAXS:sampleTitle", scan_title)
   epics_put ("9idcLAX:USAXS:state",       sprintf("starting SAXS"))
   epics_put ("9idcLAX:USAXS:userName",    USER)
   epics_put ("9idcLAX:USAXS:userDir",     CWD)
   epics_put ("9idcLAX:USAXS:specFile",    DATAFILE)
   #epics_put ("9idcLAX:USAXS:specScan",    SCAN_N+1)
   #epics_put ("9idcLAX:USAXS:timeStamp",   date())
   #epics_put ("9idcLAX:USAXS:SampleThickness",    USAXS_SAMPLE_THICKNESS)
   epics_put ("9idcLAX:USAXS:scanMacro",   "SAXS")
   #####################################################
   get_angles
   # move the sample in place...
   if(fabs(A[sx]- pos_X)>0.01 || fabs(A[sy] - pos_Y)>0.01) # !!DONT CHANGE THE SDD UNLESS WE HAVE TO!!
   {
      A[pin_z] = (PIN_ZIn + 5)         # pull back the "nose" of the pinhole tube so we dont break the mica
      move_em; waitmove
      A[sx] = pos_X
      A[sy] = pos_Y
      move_em; waitmove                #sample is either in position or we have broken out of this macro
      A[pin_z] = PIN_ZIn               # return the "nose" of the pinhole tube for minimal air scattering
      move_em; waitmove
   }else{
      #sleep(1)       # was here for unknown reason. No need to move anything or wait for anything. 
   } 
  # end move the sample in place. This also adds time so writing hdf file is done. 
  # set where to write to data....
  LocalFldrName = USAXS_CleanupFileName (DATAFILE , "saxs") 
  directory = "/mnt" CWD "/" LocalFldrName "/" 
  #####directory = "/mnt/usaxscontrol/USAXS_data/2015-01/" LocalFldrName "/" 
           #@TODO check EXPERIMENT and PIN_Image_BaseDir for illegal filesystem characters
  set_PIN_IMAGE_BASEDIR directory 
  start_file_num = epics_get("usaxs_pilatus1:cam1:FileNumber")
  epics_put("usaxs_pilatus1:cam1:FilePath","/tmp/")
  ##epics_put("usaxs_pilatus1:cam1:FilePath",directory)
  epics_put("usaxs_pilatus1:HDF1:FilePath",directory)
  epics_put("usaxs_pilatus1:Nexus1:FilePath",directory)
  epics_put("usaxs_pilatus1:cam1:FileName",scan_title)
  epics_put("usaxs_pilatus1:HDF1:FileName",scan_title)
  epics_put("usaxs_pilatus1:HDF1:BlockingCallbacks",1)         #this forces Nexus writer to finish first before "Done" is allowed. 
  epics_put("usaxs_pilatus1:Nexus1:FileName",scan_title)
  epics_put("usaxs_pilatus1:Nexus1:BlockingCallbacks",1)         #this forces Nexus writer to finish first before "Done" is allowed. 
  epics_put("9idcLAX:USAXS_Pin:sampleTitle",scan_title)
  # put sample thickness for Nexus file
  epics_put("9idcLAX:sampleThickness",thickness )
  __tmpStrMsg2 = "./" LocalFldrName "/"
  __tmpMsgString=sprintf("%s%s_%04d.hdf",__tmpStrMsg2, scan_title, start_file_num)
  comment "*************   Started SAXS Exposure   **********************"
  comment "First Sample Name %s" __tmpMsgString 
  # set Nexus file number the same in case they are out of sync
  epics_put("usaxs_pilatus1:HDF1:FileNumber",start_file_num)
  epics_put("usaxs_pilatus1:Nexus1:FileNumber",start_file_num)
  # measure transmission using PD mounted on the front of the chamber
  # move the PD in place, for now assume pin_y is enough. 
  epics_put ("9idcLAX:USAXS:state",       "Measure SAXS transmission")
  A[pin_z] = (PIN_ZIn + 5)         # pull back the "nose" of the pinhole tube so we dont break the mica
  move_em; waitmove
  A[pin_y] = (PIN_YIn + SAXS_PD_Yoffset) 
  move_em; waitmove
  openTiFilterShutter
  mv_Al_filter PIN_AL_FILTER
  mv_Ti_filter PIN_TI_FILTER
  #autorange the counters
  autorange_I0I00amps
  # count to get the tranmsission
  ct SAXS_Tr_Time
  ## check if we have not topped range
  local LocTRPinCts, LocTRI0Cts
  LocTRPinCts = S[trd]
  LocTRI0Cts  = S[I0]
  if(((LocTRPinCts/SAXS_Tr_Time)>980000) || ((LocTRI0Cts/SAXS_Tr_Time)>980000)){
        ## if yes, amplifiers were incorrectly set, redo... 
        autorange_I0I00amps
        ct SAXS_Tr_Time
  }
  closeTiFilterShutter
  # write it into the PVs
  set_PIN_TRPD(S[trd])    # pin_PD is using trd channel
  set_PIN_TRI0(S[I0])
  set_PIN_TRPDGain(TRDRange)
  set_PIN_TRI0Gain(I0Range)
  #####################################################
  # create spec scan record...
  # set heading for scans to show if we are running USAXS or SBUSAXS
        epics_put ("9idcLAX:USAXS:specScan",    SCAN_N+1)
        epics_put ("9idcLAX:USAXS:timeStamp",   date())
        epics_put ("9idcLAX:USAXS:SampleThickness",    USAXS_SAMPLE_THICKNESS)
	HEADING = "SAXS "
	HEADING=sprintf("%s%s",HEADING,sprintf(" %s    %g    %g    %g    %g     %g ",\
		__tmpMsgString, pos_X, pos_Y , thickness , PIN_AcquireTime, PIN_NumImages))
	FPRNT=PPRNT=VPRNT=""
	scan_head
	PFMT=sprintf("%%s%%8.%df ",UP)
	VFMT=sprintf("%%s%%9.%df ",UP)
	# UP is user precision, defined in standard.mac as 4
        # it can be redefined to show more decimal places if needed
  # done with spec scan record...
  #####################################################
  epics_put ("9idcLAX:USAXS:state",      "Preparing SAXS")
  epics_put ("9idcLAX:USAXS:timeStamp",   date())
  epics_put ("9idcLAX:USAXS:macroFileTime",      date())
  tempComment = sprintf("Measured transmission, I0 counts: %5.0f, with gain: %1.0e", S[I0], I0Range)
  comment "%s" tempComment 
  tempComment = sprintf("          PD after sample counts: %5.0f, with gain: %1.0e", S[trd], TRDRange)
  comment "%s" tempComment 
  A[pin_z] = (PIN_ZIn + 5)         # pull back the "nose" of the pinhole tube so we dont break the mica
  move_em; waitmove
  A[pin_y] = (PIN_YIn) 
  move_em; waitmove
  A[pin_z] = (PIN_ZIn)             # pull back the "nose" of the pinhole tube so we dont break the mica
  move_em; waitmove
  # done measuring transmission now
  mv_Al_filter PIN_AL_FILTER
  mv_Ti_filter PIN_TI_FILTER
  # set Num images and acquire time to what user wants
  epics_put("usaxs_pilatus1:cam1:NumImages",PIN_NumImages)
  epics_put("usaxs_pilatus1:cam1:AcquireTime", (PIN_AcquireTime))            # for multiple images, this is minimum readout time needed
  epics_put("usaxs_pilatus1:cam1:AcquirePeriod", PIN_AcquireTime + 0.004)    #this is how log total exposure should be, at least 0.004 s longer
  # JIL: NOTE ... Acquire period = Acquire time + 0.004 for multiple images
  # set scalars to long enough time...
  epics_put("9idcLAX:vsc:c1.TP", PIN_AcquireTime+1) 
  epics_put("9idcLAX:vsc:c0.TP", 1+1.2*PIN_AcquireTime) 
  # set scalar to manual counting only
  epics_put("9idcLAX:vsc:c0.CONT",0)
  epics_put("9idcLAX:vsc:c1.CONT",0)
  epics_put("9idcLAX:vsc:c1.RATE",60)                   ##this is needed to make sure we get as up to date I0 number as possible for AD software. 
  epics_put("9idcLAX:vsc:c0.RATE",60)                   ##this is needed to make sure we get as up to date I0 number as possible for AD software. 
  old_ScalerDelay = epics_get("9idcLAX:vsc:c0.DLY")
  epics_put("9idcLAX:vsc:c0.DLY",0)
  epics_put("9idcLAX:USAXS_Pin:StartExposureTime",date())             #Save start time for exposure
  epics_put ("9idcLAX:USAXS:state", sprintf("%s for %g sec", "SAXS exposure", PIN_AcquireTime ))
  epics_put ("9idcLAX:USAXS:sampleTitle", sprintf("%s_saxs", scan_title))
  epics_put ("9idcLAX:USAXS:timeStamp",   date())
  epics_put ("9idcLAX:USAXS:macroFileTime", date())
  epics_put("9idcLAX:vsc:c1.CNT",1)
  epics_put("9idcLAX:vsc:c0.CNT",1)  
  
  areaDetectorAcquire("usaxs_pilatus1:cam1:Acquire",PIN_AcquireTime)	# fire detector and wait for it to be done
  			
  epics_put("9idcLAX:vsc:c1.CNT",0)
  epics_put("9idcLAX:vsc:c0.CNT",0)  
  set_PIN_I0(epics_get("9idcLAX:vsc:c1.S2"))				          #set the I0 value for Nexus file writer
  epics_put("9idcLAX:vsc:c0.RATE",5)                  
  epics_put("9idcLAX:USAXS_Pin:EndExposureTime",date())               #Save end time for exposure

  # and fix the order number on case users wanted more than one image...
  if(PIN_NumImages>1){epics_put("usaxs_pilatus1:cam1:FileNumber",start_file_num+PIN_NumImages)}
  comment "I0 value: %5.0f" PIN_I0
  epics_put("9idcLAX:vsc:c0.DLY",old_ScalerDelay)
  sleep(0.05) 
  epics_put ("9idcLAX:USAXS:state",       "Done SAXS")
  epics_put ("9idcLAX:USAXS:timeStamp",   date())
  epics_put ("9idcLAX:USAXS:macroFileTime",      date())
  ### tell users we are not collecting SAXS data
  epics_put ("9idcLAX:collectingSAXS", 0)
}'

#-------------------------------------------------------------------------------
#############################################################################


def areaDetectorAcquire(acqPV, acqTime) '{
   local   _DataCollectionTimer
  _DataCollectionTimer = 1
   epics_put ("9idcLAX:USAXS:scanning",    1)
   epics_par(acqPV,"timeout",10)   #this sets timeout for this PV to 10 seconds, just in case something is wrong here... default is 1 second
   epics_par(acqPV, "monitor_set")
   epics_put(acqPV, "Acquire")
   sleep (1)
   while (epics_get(acqPV) != "Done") {
    # This sleep is only needed to not peg the cpu
    _DataCollectionTimer++
    set_FS_ElapsedTime _DataCollectionTimer
    printf("Waiting for SAXS/WAXS data collection to finish %g sec\r", _DataCollectionTimer)
    epics_put ("9idcLAX:USAXS:state", sprintf("Running SAXS/WAXS collection for %gs",_DataCollectionTimer))
    sleep(1)
    wait(0x28)
 }
 epics_par(acqPV, "monitor_clear")
 set_FS_ElapsedTime 0
 epics_put ("9idcLAX:USAXS:scanning",    0)
}'

#def areaDetectorAcquire(acqPV, acqTime) '{
# epics_put(acqPV, "Acquire", 2*acqTime+10)	# this should fire the detector and wait up to 2* exposure time for it to finish
# if(epics_get(acqPV) != "Done") {
#  comment "Area Detector was not finished in time for spec." 
#  }
#}'
