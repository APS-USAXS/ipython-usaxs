"""here go user created commands users may want to find again"""



###############################################
#Scan multiple times same samples and add order number to them.
#Now can define the sample name as string variable:


def Measure_anisotropy '{
    __FINISH = $1

    useModeUSAXS
    __USAXS_Lambda = 12.4 / A[en]
    __FINISHA = AR_VAL_CENTER - (360/PI)*asin( __FINISH * __USAXS_Lambda / (4*PI))
    print __FINISHA
    mv ar __FINISHA
    waitmove; get_angles
    openTiFilterShutter
    sleep(1)
    autorange_UPDI0I00
    TEMPLINK = sprintf ("Measuring anisotropy for AR = %g C\n", $1)
    comment "%s" TEMPLINK
    counters I0 upd 
    ascan sa -90 90 90 1
    closeTiFilterShutter
     A[sa] = 0
     A[ar] = AR_VAL_CENTER
     move_em; waitmove
}'



def RecordLoveTemp '{
    TEMPLOVE = sprintf ("Temperature on Love controller 1 is %g deg C\n", epics_get("9idcLAX:Love1:Value"))
        comment "%s" TEMPLOVE
    TEMPLOVE = sprintf ("Temperature on Love controller 2 is %g deg C\n", epics_get("9idcLAX:Love2:Value"))
        comment "%s" TEMPLOVE
}'

def SetLove1Temp '{
    epics_put("9idcLAX:Love1:PutSetPt1.B",$1)
    epics_put("9idcLAX:Love1:PutSetPt2.B",$1)
}'

def SetLove2Temp '{
    epics_put("9idcLAX:Love2:PutSetPt1.B",$1)
    epics_put("9idcLAX:Love2:PutSetPt2.B",$1)
}'

###################################################################################
def RecordK2400 '{
    """write voltage to file"""
	VOLT_K2400 = sprintf ("Voltage of Keithley2400 is %g\n",K2400_Vget)     
    comment "%s" VOLT_K2400
	I_K2400 = sprintf ("Current of Keithley2400 is %g\n", K2400_Iget)     
    comment "%s" I_K2400
    ###
}'
###################################################################################

# xpcs MACROS

def RecordLinkamTemp '{
     """write temperatures to file"""
	TEMPLINK = sprintf ("Temperature 1 of Linkam is %g deg C\n", epics_get("EPLinkam1:ci94:temp"))     
     comment "%s" TEMPLINK 
	TEMPLINK = sprintf ("Temperature 2 of Linkam is %g deg C\n", epics_get("EPLinkam1:ci94:temp2"))     
    comment "%s" TEMPLINK
     ###
}'
###################################################################################

def TuneMeUp '{
    useModeUSAXS
    umv sx -60
    preUSAXStune
    preUSAXStune
    useModeRadiography
}'
###################################################################################


def changeModeXPCS '{
   print "changing parameters to measure XPCS"
   print "change: slits, gains on ion chambers, num points and Qmax range"
   
# change I0 gain to 1e9
epics_put("9idcUSX:fem02:seq01:gainidx","1e9 low noise")

# change I00 gain to 1e9
epics_put("9idcUSX:fem03:seq01:gainidx","1e9 low noise")


# change detector delay to 0
epics_put("9idcLAX:vsc:c0.DLY", 0)

# open slits to 0.015 x 0.015 mm
mv uslvap 0.015
mv uslhap 0.015
set_USAXS_HSlit 0.015
set_USAXS_VSlit 0.015

set_MOTOR_PRESCALER_WAIT 0

### Now lets change the temperature... 
     # set stop Linkam
#     epics_put("EPlinkam3:ci94:stop.PROC",1)
#     sleep(1)
     # set rate for Linkam to 50deg/min
#     epics_put("EPlinkam3:ci94:setRate",50)
#     sleep(1)
     # set temperature target for for Linkam to 105deg
#     epics_put("EPlinkam3:ci94:setLimit",105)
#     sleep(1)
     # set start Linkam
#     epics_put("EPlinkam3:ci94:start.PROC",1)

### Now lets measure 100 pnts with peak... 

   USAXS_MEASURE_DARK_CURENTS = 0    
   # Full scan and short q range scan
   set_NUMPNTS  100
   set_FINISH 0.001
   set_START_OFFSET 0.0015
   set_UATERM 1

}'

###################################################################################

def changeModeUSAXS '{
   print "changing parameters to measure USAXS"
   print "change: slits, gains on ion chambers, num points and Qmax range"

# change I0 gain to 1e7
epics_put("9idcUSX:fem02:seq01:gainidx","1e7 low noise")

# change I00 gain to 1e6
epics_put("9idcUSX:fem03:seq01:gainidx","1e7 low noise")

# change detector delay to 0.05
epics_put("9idcLAX:vsc:c0.DLY", 0.05)

#epics_put ("9idcUSX:pd01:seq02:reqrange", "1e6 V/A gain")

# open slits to 0.5 x 0.5 mm
mv uslvap 0.5
mv uslhap 0.5

set_MOTOR_PRESCALER_WAIT 0.05

#setup full scans...
    USAXS_MEASURE_DARK_CURENTS = 1    
    # Full scan and short q range scan
    set_NUMPNTS  200
    set_FINISH 0.1
    set_START_OFFSET 0.0015
    set_UATERM 1.2

}'

###################################################################################


def tune_asrp '{
   tune_usaxs_motor asrp -0.8 0.8 60 0.2
   set_ASR_VAL_CENTER pl_COM
   printf ("asrp0 position for next scan is %g volts [V]\n", ASRP0)
    
}'

def tune_a2rp '
	epics_put("9idcLAX:vsc:c0.DLY", 0.2)
	tune_usaxs_motor a2rp -1 1 50 0.2
	epics_put("9idcLAX:vsc:c0.DLY", 0.1)
	# try to approach from the original position since the piezzos seem to have some hysteresis
	umvr a2rp -0.1
	sleep(0.2)
	umv a2rp pl_COM
	# JIL 6 29 2009 
'

def tune_ar   '{
  global AR_VAL_CENTER_OFFSET  
  local __range
  __range = 0.004
  if( $# == 1 ) { __range = $1 }
  tune_usaxs_motor ar __range -1*__range 80 0.3
      # we are now at the top of the AR rocking curve
      # let us define the beam center as such
  waitmove; get_angles;
      # fix for missing the beam center by use of AR_VAL_CENTER_OFFSET, JIL 12/12/2007
  umvr ar AR_VAL_CENTER_OFFSET
  waitmove; get_angles;
  # store AR center
  set_AR_VAL_CENTER A[ar]
      # remember the Q calculation needs a new 2theta0
      # use the current AR encoder position
  epics_put("9idcLAX:USAXS:Q.B", epics_get("9idcLAX:USAXS:Q.A"))
}'

# def tune_me_up 'useModeUSAXS;preUSAXStune;useModeRadiography'
#def useModeSAXS 'print "SAXS mode disabled, comment overwrite in USAXS_conf and reload macros"'

def RecordLoveTemp '{
    TEMPLOVE = sprintf ("Temperature on Love controller 1 is %g deg C\n", epics_get("9idcLAX:Love1:Value"))
        comment "%s" TEMPLOVE
    TEMPLOVE = sprintf ("Temperature on Love controller 2 is %g deg C\n", epics_get("9idcLAX:Love2:Value"))
        comment "%s" TEMPLOVE
}'

def SetLove1Temp '{
    epics_put("9idcLAX:Love1:PutSetPt1.B",$1)
    epics_put("9idcLAX:Love1:PutSetPt2.B",$1)
}'

def SetLove2Temp '{
    epics_put("9idcLAX:Love2:PutSetPt1.B",$1)
    epics_put("9idcLAX:Love2:PutSetPt2.B",$1)
}'



def RecordLinkamTemp '{
     """write temperatures to file"""
	TEMPLINK = sprintf ("Temperature 1 of Linkam is %g deg C\n", epics_get("EPlinkam3:ci94:temp"))     
     comment "%s" TEMPLINK 
	TEMPLINK = sprintf ("Temperature 2 of Linkam is %g deg C\n", epics_get("EPlinkam3:ci94:temp2"))     
    comment "%s" TEMPLINK
     ###
}'

def set_LinkamTemp '{
    local LA_settemp
    LA_settemp = ($1)
    epics_put("EPlinkam3:ci94:setLimit", LA_settemp)
    TEMPLINK = sprintf ("Linkam Set Temperature changed to %g deg C\n", epics_get("EPlinkam3:ci94:setLimit"))
    comment "%s" TEMPLINK
}'

def set_LinkamRate 'epics_put("EPlinkam3:ci94:setRate", $1)'

def WaitLinkamTemp '{
    local LA_start_time, LA_settemp, LA_readtemp
    LA_settemp = epics_get("EPlinkam3:ci94:setLimit")
    printf("Waiting for Temperature 2 to reach %g deg C\n", LA_settemp)
    LA_start_temp = time()

    LA_readtemp = epics_get("EPlinkam3:ci94:temp2")
    while(fabs(LA_readtemp-LA_settemp) > 1){
        sleep(5)
        printf("Waited for %d seconds\r", time()-LA_start_temp)
        LA_readtemp = epics_get("EPlinkam3:ci94:temp2")
    }
}'
