
#### pieces to set Pilatus detector
global PILATUS_PV
PILATUS_PV="DP-PILATUS1:"
CCD_DATA_DIR="/disk2/8id/"


def pilatus_setmode '{
    if($#!=1) {
        p "Usage: pilatus_setmode 0-4"
        p "       0: Internal;1:Ext. Enable;2:Ext.Trigger;3:Mult. Trigger;4:Alignment"
        exit

    }
    epics_put(sprintf("%sAcquireMode",PILATUS_PV),$1)
    sleep(0.1)
    printf("Set Pilatus mode to %s",epics_get(sprintf("%sAcquireMode",PILATUS_PV)))
}'


def pilatus_settime'{
    if($#!=1) {
      p "Usage:pilatus_settime xtime"
      exit
    }
    local mode
    mode=epics_get(sprintf("%sAcquireMode",PILATUS_PV),"short") 
    if(mode =="0") epics_put(sprintf("%sExposurePeriod",PILATUS_PV),($1)+0.004);
    epics_put(sprintf("%sExposureTime",PILATUS_PV),$1)

}'


def pilatus_setxperiod '{
    if($#!=1) {
      p "Usage:pilatus_setxperiod xtime"
      exit
    }
    epics_put(sprintf("%sExposurePeriod",PILATUS_PV),$1)

}'



def pilatus_setfilepath(s)'{
    local byte array fp[256]
    local n i
    fp=s
    epics_put(sprintf("%sFilePath",PILATUS_PV),fp)
    sleep(1)     
   
}'


def pilatus_setfilebase(s)'{
    epics_put(sprintf("%sFilename",PILATUS_PV),s)
}'


def pilatus_setfileformat(s) '{
     epics_put(sprintf("%sFileFormat",PILATUS_PV),s)

}'


def pilatus_setseqN '{
    epics_put(sprintf("%sFileNumber",PILATUS_PV),$1)
}'

def pilatus_trig '{

    local x
    if( $# == 0) 
       x = 1;
    else 
       x = $1   
    if(x < 1) {
        eprint "Usage: Number of Images can not be less than 1"
	exit
    }
    epics_put(sprintf("%sNImages",PILATUS_PV),x);
    epics_put(sprintf("%sAcquire",PILATUS_PV),1);

}'


def pilatus_wait '{
   while(epics_get(sprintf("%sAcquire",PILATUS_PV),"short") ){
     sleep(0.05)
   }
}'



def pilatus_save '{

    if($# !=1 ) {
       eprint "Usage: pilatus_save on/off"
       exit
    }
    if( "$1" == "on")  {
      epics_put(sprintf("%sAutoIncrement",PILATUS_PV),1)
      pilatus_setfileformat("%s%s%.3d.tif")
       
    }
    if( "$1" == "off") {
       pilatus_setfilebase("dummy")
       pilatus_setfileformat("%s.tif")
       epics_put(sprintf("%sAutoIncrement",PILATUS_PV),0)
    }

}'


####################hook pilatus to ccd macros
global CCDPV CCD_DATA_DIR  CCD_MONITOR_ROI
global  CCD_SCAN_SAVE CCD_REPEATS
global CCD_DARK_NUM CCDDARK CCD_THROW

global USE_CCDDET_FLAG


###redefine ccd macros with pilatus commands here
CCDPV= PILATUS_PV


def ccdset_time ' pilatus_settime'

def ccdset_seqnum ' pilatus_setseqN '

def ccdset_filepath ' pilatus_setfilepath'

def ccdset_filetemplate ' pilatus_setfilebase '

def ccdset_fileformat ' pilatus_setfileformat '

def ccdsave 'pilatus_save '

def ccdtrig ' pilatus_trig'

def ccdwait ' pilatus_wait'

def ccdarm  ''



def ccdsetup '{
   CCDPV=PILATUS_PV=getval("The EPICS prefix of the CCD device:",CCDPV);
   CCD_DATA_DIR = getval("The directory where the Image Server saves the data:",CCD_DATA_DIR)

   if(substr(CCD_DATA_DIR,length(CCD_DATA_DIR)) != "/" ) {
      CCD_DATA_DIR = CCD_DATA_DIR "/"
   } 
   ccdc_setup
   if(chk_ccdc() && USE_CCDDET_FLAG) {
      CCD_MONITOR_ROI = CCDPV "ROI" getval("ROI# for the counter (\"none\" to not use)","1")
     
   }

}'


###############################################################################
#                          ccdscan macros                                     #
###############################################################################
if(unset("CCDDARK")) {
CCDDARK = 0;
CCD_REPEATS =1;
CCD_DARK_NUM = 0;
CCD_SCAN_SAVE = 1
}




def ccdscan_setup'
    if($# != 0 && $# !=3) {
       p "Usage: ccdscan_setup or ccdscan_setup save_flag  #darks #repeats_per_point"
       p "       if num darks is negative, will take dark at the end of the scan."
       exit
    }   
    if( $#  == 0) {   
       CCD_SCAN_SAVE =  yesno("Save images during scan?",CCD_SCAN_SAVE);
       CCD_DARK_NUM = 0
       CCD_REPEATS = getval("Number of images per scan point:", CCD_REPEATS);
    }
    if($# ==3 ) {
       CCD_SCAN_SAVE = $1
       CCD_DARK_NUM = 0
       CCD_REPEATS = $3
      
    }
'

global OFF_SEQN

def ccdscan '{
    if($# ==0) {
        p "Usage: ccdscan any_spec_scan_macro"
	p "example: ccdscan ascan th  1 2 20 1"
	exit
    }	
    OFF_SEQN = epics_get(sprintf("%sFileNumber",CCDPV));
    CCD_FLAG =1;
    ond;offt;
    printf("\n#C %s ccdscan is turned on\n",date())
    ont;offd
    cdef("cleanup_once","ccdscan_cleanup;","ccdscan","0x20")
    
    $*
    
    CCD_FLAG=0;
    ond;offt;
    printf("\n#C %s ccdscan is turned off\n",date())
    ont;offd
    offd;ont;
    ccdset_filepath(sprintf("%s%s",CCD_DATA_DIR,get_datafilename()));
    ccdset_filetemplate(sprintf("%s_scanoff",get_datafilename()));
    ccdset_seqnum OFF_SEQN
    ccdsave on
    CCDDARK = 0;
}'


###############################################################################
#                Internal Macros/Functions                                    #
###############################################################################

#------------------------------------------------------------------------------
# cleaning stuff 
#------------------------------------------------------------------------------

def ccdscan_cleanup_scanabort 'ccdscan_cleanup'

def ccdscan_cleanup  '
    epics_put(sprintf("%sAbort",CCDPV),1);
    ccdset_filepath(sprintf("%s%s",CCD_DATA_DIR,get_datafilename()));
    ccdset_filetemplate(sprintf("%s_scanoff",get_datafilename()));
    ccdset_seqnum OFF_SEQN
    ccdsave on
    CCDDARK = 0;
    ont;offd
    CCD_FLAG = 0;
    printf("\n%s. ccdscan aborted;cleaned ccdscan stuff.",date())
'    
    

#------------------------------------------------------------------------------
# turn on/off the user defined macros inside the stardard scan macros for ccdscan
#------------------------------------------------------------------------------
def ccduse_on '
    global CCD_FLAG
    cdef("measure0","
         if(CCD_FLAG) {_measure0_ccd}
         ","ccd","0x10")
    cdef("measure2","
         if(CCD_FLAG){ _measure2_ccd}
         ","ccd","0x10")
    cdef("user_prescan_head","
         if(CCD_FLAG){ _user_prescan_head_ccd}
	 ","ccd","0x10")
'   


def ccduse_off '
    cdef("measure0","","ccd","delete")
    cdef("measure2","","ccd","delete")
    cdef("user_prescan_head","","ccd","delete")
'     






def ccdscan_throw ' ccdsave off; '
def ccdset_shutter ''



def _user_prescan_head_ccd ' 
     ccdset_time _ctime
     ccdset_shutter
     ccdscan_throw
     ccdscan_header
     if(CCD_DARK_NUM>0) {ccdscan_dark;}
'   



def ccdscan_header '
    local vstart vlength hstart hlength foo
    
    ond;offt
    printf("\n#CCD ccdscan %i",SCAN_N+1);
    printf("\n#CCD save_flag %i",CCD_SCAN_SAVE);
    if(CCD_SCAN_SAVE) {
       printf("\n#CCD image_dir %s%s",CCD_DATA_DIR,get_datafilename());
    } else {
       printf("\n#CCD image_dir N/A")
    }   
    printf("\n#CCD repeats_per_point %i",CCD_REPEATS);
    printf("\n#CCD dark %i",fabs(CCD_DARK_NUM));
    

   
    if(chk_ccdc() &&  (CCD_MONITOR_ROI != "none")) {
       vstart = epics_get(sprintf("%sYMin",CCD_MONITOR_ROI));
       hstart = epics_get(sprintf("%sXMin",CCD_MONITOR_ROI));
       vlength = epics_get(sprintf("%sYMax",CCD_MONITOR_ROI));
       hlength = epics_get(sprintf("%sXMax",CCD_MONITOR_ROI));
       printf("\n#CCD counter_roi %s %i %i %i %i",CCD_MONITOR_ROI,vstart,hstart,vlength,hlength);
    } else {
       printf("\n#CCD counter_roi %s %i %i %i %i", "N/A",0,0,0,0);
    }   
    ont;offd
    if(CCD_SCAN_SAVE) {
         ccdsave on
         foo = sprintf("%s%s/S%s/",CCD_DATA_DIR, get_datafilename(),SCAN_N+1);
         ccdset_filepath(foo);
         ccdset_fileformat("%s%s%.3d.tif")
         ccdset_seqnum 1
    }
							      
    
'


def ccdscan_dark ''


def _measure0_ccd '
      if(CCD_SCAN_SAVE) {
         if(NPTS>0) {
           ccdwait
         } 
         local foo2
	 foo2 = sprintf("%s_S%s_N",get_datafilename(),SCAN_N)
         ccdset_filetemplate(foo2);
      }
      ccdarm
      ccdtrig CCD_REPEATS
      
'
def _measure2_ccd '
      ccdwait
      if(CCD_MONITOR_ROI != "none") {
         ccd_getcounts
      }	   	 
'                 

def ccd_getcounts '
    if( chk_ccdc()) {
       S[ccdc] = epics_get(sprintf("%sNetCounts",CCD_MONITOR_ROI));
    }   
'



###################other macros

def get_datafilename() ' {
    local  foo1 [];
    local foo2;
    foo2 = split(DATAFILE,foo1,"/")-1
    return foo1[foo2];
}'



def chk_ccdc() '{
     local foo i
     foo = 0;
     for(i=0;i<COUNTERS;i++) {
        if(cnt_name(i) == "ccdc")  {
	   foo =1;
	   break;
	} 
     }
     return foo;
}'
def ccdc_setup '{
  local i foo  foo2
  foo = yesno("\nSetup a pseudo counter(ccdc) to monitor some ROIS (its average value) from spec?",USE_CCDDET_FLAG)
  if( foo == 1) {
     foo2=chk_ccdc();
     if(foo2) {
         print "Found a counter named ccdc."
	 print "Seems that you have already configured a pseudo counter(None type)."
     } else {
         printf("%c%sPlease configure a pseudo counter \"ccdc\"(None type) with config%c%s.\n",27,"[31m",27,"[0m")
     }
     USE_CCDDET_FLAG = 1
  } else {
     USE_CCDDET_FLAG = 0
  }
  CCD_MONITOR_ROI = "none"   
}'



ccduse_on
